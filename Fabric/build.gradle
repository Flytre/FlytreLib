plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'net.darkhax.curseforgegradle' version '1.0.7'
    id 'net.darkhax.tweedle' version '1.0.5'
    id 'idea'
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = 'Mod Menu'
        url = 'https://maven.terraformersmc.com/releases/'
    }
}

apply from: '../gradle/property_helper.gradle'

archivesBaseName = "${mod_id}-${minecraft_version}-${mod_version}-fabric"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    include fabricApi.module("fabric-resource-loader-v0", fabric_version)


    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
    modRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"

    modRuntime "com.terraformersmc:modmenu:${modmenu_version}"
}


moduleDependencies(project, [
        "Common"
])



loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    accessWidenerPath = file("src/main/resources/${mod_id}.accessWidener")

}

processResources {

    from project(":Common").sourceSets.main.resources

    def buildProps = project.properties.clone()
    filesMatching(['fabric.mod.json', 'pack.mcmeta', "${mod_id}.mixins.json".toString()]) {

        expand buildProps
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

// -- MAVEN PUBLISHING --
project.publishing {

    publications {

        mavenJava(MavenPublication) {

            artifactId project.archivesBaseName

            // Base mod archive.
            artifact(remapJar) {

                builtBy remapJar
            }

            // Adds the soruces as an artifact.
            artifact(sourcesJar) {

                builtBy remapSourcesJar
            }
        }
    }

    repositories {

        maven {

            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {

                credentials {

                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
    }
}


def auth = new Properties()
try {
    file("../auth.properties").withInputStream { auth.load(it) }
} catch (ignored) {
    file("../auth_fallback.properties").withInputStream { auth.load(it) }
}

// CurseForge Publishing
task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = auth.getProperty("curseforge_token")

    def mainFile = upload(curse_project, file("${project.buildDir}/libs/${archivesBaseName}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = project.ext.mod_changelog
    mainFile.addJavaVersion('Java 17')
    mainFile.addJavaVersion('Java 18')
    mainFile.releaseType = 'beta'
    mainFile.addModLoader('Fabric')

    def versions = supported_versions.split(",")
    versions.each(v -> {
        mainFile.addGameVersion(v)
    })

    doLast {

        if (project.hasProperty('mod_homepage')) {

            project.ext.curse_file_url = "${mod_homepage}/files/${mainFile.curseFileId}"
        }
    }
}