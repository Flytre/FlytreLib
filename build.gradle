// TODO remove buildscript block
buildscript {

    repositories {

        mavenCentral()
    }
}

apply from: 'gradle/property_loader.gradle'
apply from: 'gradle/git_changelog.gradle'

version = mod_version

subprojects {

    apply plugin: 'maven-publish'

    apply from: '../gradle/property_loader.gradle'
    apply from: '../gradle/java.gradle'
    apply from: '../gradle/git_changelog.gradle'
    apply from: '../gradle/minify_jsons.gradle'
    apply from: '../gradle/signing.gradle'

    // Disables Gradle's custom module metadata from being published to maven. The 
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {

        enabled = false
    }

    repositories {

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }

    dependencies {
        implementation group: 'org.jetbrains', name: 'annotations', version: '22.0.0'
    }
}

allprojects {
    configurations {
        dev
    }
}

//Compile-time dependencies that are not exported
def moduleDependencies(project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it") }
    project.dependencies {
        deps.each {
            compileOnly it
        }
    }
}

task test() {

/*
 This module will generate a changelog using the Git commit log. The log will
 be generated using all known commits since the last run. If no last run is
 known the current commit will be used. The changelog output is in markdown
 format and will contain the commit message and a link to the commit.
*/
    apply from: "$rootDir/gradle/property_helper.gradle"

    project.ext.mod_changelog = 'No changelog available.'

    try {

        def gitRepo = mod_source ?: project.findProperty('gitRemote', getExecOutput(['git', 'remote', 'get-url', 'origin']))
        def gitCommit = System.getenv('GIT_COMMIT') ?: getExecOutput(['git', 'log', '-n', '1', '--pretty=tformat:%h'])
        def gitPrevCommit = System.getenv('GIT_PREVIOUS_COMMIT')


        // If a full range is available use that range.
        if (gitCommit && gitPrevCommit) {

            project.ext.mod_changelog = getExecOutput(['git', 'log', "--pretty=tformat:- %s [(%h)](${gitRepo}/commit/%h)", '' + gitPrevCommit + '..' + gitCommit])
            project.logger.lifecycle("Appened Git changelog with commit ${gitPrevCommit} to ${gitCommit}.")
        }

        // If only one commit is available, use the last commit.
        else if (gitCommit) {

            project.ext.mod_changelog = getExecOutput(['git', 'log', '' + "--pretty=tformat:- %s [(%h)](${gitRepo}/commit/%h)", '-1', '' + gitCommit])
            project.logger.lifecycle(project.ext.mod_changelog.toString())
            project.logger.lifecycle("Appened Git changelog with commit ${gitCommit}.")
        }
    }

    catch (Exception e) {

        project.logger.warn('Changelog generation has failed!', e)
    }

}