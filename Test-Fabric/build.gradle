plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = 'Mod Menu'
        url = 'https://maven.terraformersmc.com/releases/'
    }
}

build {
    onlyIf { false }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"

    modRuntimeOnly "com.terraformersmc:modmenu:${modmenu_version}"

    implementation project(path: ":Fabric", configuration: "namedElements")
}

moduleDependencies(project, [
        "Test-Common", "Common"
])

loom {
    runs {
        client {
            client()
            setConfigName("Test Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Test Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {

    from project(":Test-Common").sourceSets.main.resources

    def buildProps = project.properties.clone()
    filesMatching(['fabric.mod.json', 'pack.mcmeta', '*.mixins.json']) {

        expand buildProps
    }

    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.withType(JavaCompile) {
    source(project(":Test-Common").sourceSets.main.allSource)
}